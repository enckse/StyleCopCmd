<?xml version="1.0" encoding="utf-8"?>

<!--
    NOTE 1
    make sure to include the default namespace so that visual studio
    will turn on intellisense for this nant build file 
    
    NOTE 2
    for non .NET developers: for all intents and purpose a solution in 
    VisualStudio (VS) is the same thing as a top-level project in most other
    languages, and VS project is the same as a package. in order to make it 
    easier for communicate amonst .NET developers working with both VS and
    NAnt, this NAnt build file will refer to the top-level project as a solution
    and packages as projects.
-->
<project xmlns="http://nant.sourceforge.net/release/latest/nant.xsd">

    <!-- **************************** SWITCHES ******************************-->

    <!--
        this property is set to true if this build script is being executed
        in a teamcity environment; otherwise it is not set at all. the existence
        of this property allows any part of the script to determine if it is
        being executed inside a teamcity build environment by using the
        following function call:
        
        ${property::exists('teamcity')}
    -->
    <if test="${property::exists('teamcity.projectName')}">
        <property name="teamcity"
                  value="true"/>
    </if>

    <!-- **************************** SWITCHES ******************************-->
    

    <!-- *************************** DIRECTORIES *************************** -->

    <!-- the name of the configuration directory -->
    <property name="conf"
              value="conf"/>
    
    <!-- the path to the solution's conf directory -->
    <property name="sol.conf"
              value="${custom::get-sol-relative-path(conf)}" />
    
    <!-- the path to the project's conf directory -->
    <property name="proj.conf"
              value="${conf}" />

    <!-- directory for distribution files -->
    <property name="dist"
              value="dist"/>

    <!-- the path to the solution's dist directory -->
    <property name="sol.dist"
              value="${custom::get-sol-relative-path(dist)}" />

    <!-- the path to the project's dist directory -->
    <property name="proj.dist"
              value="${dist}" />

    <!-- the name of the build directory -->
    <property name="build"
              value="build"/>

    <!-- the path to the solution's build directory -->
    <property name="sol.build"
              value="${custom::get-sol-relative-path(build)}" />

    <!-- the path to the project's build directory -->
    <property name="proj.build"
              value="${build}" />

    <!-- the name of the directory that contains documentation -->
    <property name="docs"
              value="docs"/>

    <!-- the path to the solution's docs directory -->
    <property name="sol.docs"
              value="${custom::get-sol-relative-path(docs)}" />

    <!-- the path to the project's docs directory -->
    <property name="proj.docs"
              value="${docs}" />

    <!-- the path to the solution's docs directory -->
    <property name="sol.docs"
              value="${custom::get-sol-relative-path(docs)}" />

    <!-- the path to the project's docs directory -->
    <property name="proj.docs"
              value="${docs}" />

    <!--
        the name of the directory that contains a solution's projects
        as well as the name of the directory that contains a project's
        source code.
    -->
    <property name="src"
              value="src"/>

    <!-- the path to the solution's src directory -->
    <property name="sol.src"
              value="${custom::get-sol-relative-path(src)}" />

    <!-- the path to the project's src directory -->
    <property name="proj.src"
              value="${src}" />

    <!-- 
        the name of the directory that cotains a solution's unit test projects
    -->
    <property name="test"
              value="test"/>

    <!-- the path to the solution's test directory -->
    <property name="sol.test"
              value="${custom::get-sol-relative-path(test)}" />

    <!-- 
        the name of the directory that contains a project's resource 
        and localization files 
    -->
    <property name="res"
              value="res"/>

    <!-- the path to the project's res directory -->
    <property name="proj.res"
              value="${res}" />

    <!-- 
        the name of the directory that contains reference libraries needed
        to build a solution or project
    -->
    <property name="lib"
              value="lib"/>

    <!-- the path to the solution's lib directory -->
    <property name="sol.lib"
              value="${custom::get-sol-relative-path(lib)}" />

    <!-- 
        override the path of the solution's lib directory with the value
        of the environment variable LIB_DOTNET if said variable exists.
        this facilitates easy integration with TeamCity since the libraries are
        not stored on the source repository and therefore must be present
        on the build agent.
    -->
    <if test="${environment::variable-exists('LIB_DOTNET')}">
        <property name="sol.lib"
                  value="${environment::get-variable('LIB_DOTNET')}" />
    </if>

    <!-- the path to the project's lib directory -->
    <property name="proj.lib"
              value="${lib}" />

    <!-- 
        override the path of the projects's lib directory with the value
        of the environment variable LIB_DOTNET if said variable exists.
        this facilitates easy integration with TeamCity since the libraries are
        not stored on the source repository and therefore must be present
        on the build agent.
    -->
    <if test="${environment::variable-exists('LIB_DOTNET')}">
        <property name="proj.lib"
                  value="${environment::get-variable('LIB_DOTNET')}" />
    </if>

    <!-- the name of the directory that contains sql scripts -->
    <property name="sql"
              value="sql"/>

    <!-- the path to the solution's sql directory -->
    <property name="sol.sql"
              value="${custom::get-sol-relative-path(sql)}" />

    <!-- the path to the project's sql directory -->
    <property name="proj.sql"
              value="${sql}" />

    <!-- the name of the tools directory -->
    <property name="tools"
              value="tools"/>

    <!-- the path to the solution's tools directory -->
    <property name="sol.tools"
              value="${custom::get-sol-relative-path(tools)}" />

    <!-- 
        override the path of the solution's tools directory with the value
        of the environment variable TOOLS_DOTNET if said variable exists.
        this facilitates easy integration with TeamCity since the tools are
        not stored on the source repository and therefore must be present
        on the build agent.
    -->
    <if test="${environment::variable-exists('TOOLS_DOTNET')}">
        <property name="sol.tools"
                  value="${environment::get-variable('TOOLS_DOTNET')}" />
    </if>

    <!-- the path to the project's tools directory -->
    <property name="proj.tools"
              value="${tools}" />

    <!-- 
        override the path of the project's tools directory with the value
        of the environment variable TOOLS_DOTNET if said variable exists.
        this facilitates easy integration with TeamCity since the tools are
        not stored on the source repository and therefore must be present
        on the build agent.
    -->
    <if test="${environment::variable-exists('TOOLS_DOTNET')}">
        <property name="proj.tools"
                  value="${environment::get-variable('TOOLS_DOTNET')}" />
    </if>

    <!-- 
        the name of the directory for items to be included in the build 
        output but not compiled, ex. an XSL file 
    -->
    <property name="inc"
              value="inc"/>

    <!-- the path to the solution's inc directory -->
    <property name="sol.inc"
              value="${custom::get-sol-relative-path(inc)}" />

    <!-- the path to the project's inc directory -->
    <property name="proj.inc"
              value="${inc}" />

    <!-- *************************** DIRECTORIES *************************** -->


    <!-- *********************** SOLUTION PROPERTIES *********************** -->

    <!-- the descriptive title of the solution -->
    <property name="sol.title"
              value="StyleCopCmd"/>

    <!-- 
        the solution's name. this is generally in the unix format (short)
    -->
    <property name="sol.name"
              value="StyleCopCmd"/>

    <!-- the description of the solution -->
    <property name="sol.description"
              value="StyleCopCmd provides a command-line interface and NAnt task to StyleCop"/>

    <!-- 
        the solution's build number / version. get it from the conf/build.num
        file if it exists, but override it with the property build.num that
        the CI server sets
    -->

    <!-- set the version to 0.0.0 -->
    <property name="sol.version"
              value="0.0.0"/>

    <!-- 
        if the file ../../conf/build.num exists then set the version to the
        value stored in that file. this will occur when a build is intiated at
        the project level instead of at the solution level
    -->
    <if test="${file::exists('../../' + conf + '/build.num')}">
        <loadfile property="sol.version"
                  file="../../${conf}/build.num" />
    </if>

    <!--
        if the file conf/build.num exists then set the version to the value
        stored in that file. this will occur when a build is initiated at
        the solution level
    -->
    <if test="${file::exists(conf + '/build.num')}">
        <loadfile property="sol.version"
                  file="${conf}/build.num" />
    </if>

    <!--
        if the property build.number has been set and its value is not -1 then
        get the value from that property. this occurs when TeamCity is running
        this build. the -1 exception exists so a Release build configuration can
        be created for TeamCity where the build number is still read from the 
        file build.num and not from the TeamCity value. developers might want
        to do this when there is a build configuration that builds, tests, and
        documents a solution, writes the build number to the build.num file, and
        then a separate TeamCity build configuration that creates distribution
        packages and releases the software. because TeamCity cannot share build
        numbers between build configurations, the build number is stored in the
        file so that the release build configuration has access to it.
    -->
    <if test="${property::exists('build.number') and property::get-value('build.number') != '-1'}">
        <property name="sol.version"
                  value="${build.number}"/>
    </if>

    <!-- *********************** SOLUTION PROPERTIES *********************** -->


    <!-- ******************* DEFAULT PROJECT PROPERTIES ******************** -->

    <!--
        this section sets some default project properties, such as the 
        description and version, to the same values that have been set for
        the solution. it is expected that a project will override these values
        in its own properties file
    -->

    <!-- a project description defaults to the solution description -->
    <property name="proj.description"
              value="${sol.description}"/>

    <!-- a project version defaults to the solution version -->
    <property name="proj.version"
              value="${sol.version}"/>

    <!-- a project title defaults to the solution's name -->
    <property name="proj.title"
              value="${sol.title}" />

    <!-- ******************* DEFAULT PROJECT PROPERTIES ******************** -->

    
    <!-- ****************************** TOOLS ****************************** -->
    
    <!-- nant -->
    <property name="tools.nant.basedir"
              value="nant-0.86-beta1" />

    <!-- ncover -->
    <property name="tools.ncover.basedir"
              value="ncover-2.1"/>

    <!-- fxcop -->
    <property name="tools.fxcop.basedir"
              value="fxcop-1.36-beta2"/>

    <!-- stylecopcmd -->
    <property name="tools.stylecopcmd.basedir"
              value="stylecopcmd"/>

    <!-- doxygen -->
    <property name="tools.doxygen.basedir"
              value="doxygen" />

    <!-- ndepend -->
    <property name="tools.ndepend.basedir"
              value="ndepend" />

    <!-- nunit -->
    <property name="tools.nunit.basedir"
              value="nunit-2.4.8-net-2.0" />

    <!--
        this is a useful patternset that includes all of
        the tool directories. these directories will be
        copied to this solutions sources distribution package
    -->
    <patternset id="tools.default">
        <include name="${tools.nant.basedir}/**"/>
        <include name="${tools.doxygen.basedir}/**"/>
        <include name="${tools.fxcop.basedir}/**"/>
        <include name="${tools.ncover.basedir}/**"/>
        <include name="${tools.ndepend.basedir}/**"/>
        <include name="${tools.stylecopcmd.basedir}/**"/>
        <include name="${tools.nunit.basedir}/**"/>
    </patternset>

    <!-- ****************************** TOOLS ****************************** -->


    <!-- ******************************* LIB ******************************* -->

    <!-- NUnit -->
    <property name="lib.nunit.basedir"
              value="nunit-2.4.8-net-2.0" />
    <patternset id="lib.nunit">
        <include name="${lib.nunit.basedir}/nunit.framework.dll"/>
    </patternset>

    <!-- dotnetcli -->
    <property name="lib.dotnetcli.basedir"
              value="dotnetcli-0.1.1" />
    <patternset id="lib.dotnetcli">
        <include name="${lib.dotnetcli.basedir}/dotnetcli-0.1.1.dll"/>
    </patternset>

    <!-- stylecop -->
    <property name="lib.stylecop.basedir"
              value="stylecop" />
    <patternset id="lib.stylecop">
        <include name="${lib.stylecop.basedir}/*.dll"/>
    </patternset>
    
    <!-- NAnt -->
    <property name="lib.nant.basedir"
              value="nant-0.86-beta1" />
    <patternset id="lib.nant">
        <include name="${lib.nant.basedir}/*.dll" />
    </patternset>"

    <!-- default includes -->
    <patternset id="lib.default">
        <patternset refid="lib.stylecop"/>
    </patternset>

    <!-- default test includes -->
    <patternset id="lib.test">
        <patternset refid="lib.nunit"/>
    </patternset>

    <!-- 
        project-specific incldes 
        
        individual projects can override this in order to include 
        project-specific dependencies
    -->
    <patternset id="lib.project" />

    <!--
        reference the required .net framework assemblies
    -->
    <patternset id="lib.dotnet.framework">
        <include name="${environment::get-variable('WinDir')}\Microsoft.NET\Framework\v2.0.50727\System.dll"/>
        <include name="${environment::get-variable('ProgramFiles')}\Reference Assemblies\Microsoft\Framework\v3.5\System.Core.dll"/>
        <include name="${environment::get-variable('WinDir')}\Microsoft.NET\Framework\v2.0.50727\System.Data.dll"/>
        <include name="${environment::get-variable('ProgramFiles')}\Reference Assemblies\Microsoft\Framework\v3.5\System.Data.DataSetExtensions.dll" />
        <include name="${environment::get-variable('WinDir')}\Microsoft.NET\Framework\v2.0.50727\System.Xml.dll" />
        <include name="${environment::get-variable('ProgramFiles')}\Reference Assemblies\Microsoft\Framework\v3.5\System.Xml.Linq.dll"/>
    </patternset>
    
    <!-- ******************************* LIB ******************************* -->
    
    
    <!-- ***************************** IGNORE ****************************** -->
  
    <!--
        a list of generated files that tools like ncover, ndepend,
        fxcop, stylecop, etc. should ignore
    -->
    <patternset id="src.generated">
        <include name="Properties/AssemblyInfo.cs"/>
        <include name="GlobalSuppressions.cs"/>
    </patternset>

    <!-- ***************************** IGNORE ****************************** -->
    
</project>